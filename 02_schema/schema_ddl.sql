-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2025-01-21 12:33:37 CET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

--  The addresses table stores shipping addresses for users. It includes
--  address_id, user_id, street_address, city, postal_code, country, and
--  phone_number
CREATE TABLE addresses (
    address_id NUMBER GENERATED AS IDENTITY (START WITH 10 INCREMENT BY 10) PRIMARY KEY,
    user_id    NUMBER NOT NULL,
    country    VARCHAR2(50) NOT NULL,
    city       VARCHAR2(20) NOT NULL,
    post_code  VARCHAR2(6) NOT NULL,
    st_name    VARCHAR2(15),
    house_no   VARCHAR2(6) NOT NULL
);

CREATE INDEX idx_addresses_userid ON
    addresses (
        user_id
    ASC );

CREATE INDEX idx_addresses_postalcode ON
    addresses (
        post_code
    ASC );

ALTER TABLE addresses
    ADD CONSTRAINT chk_addresses_stname CHECK ( ( length(st_name) >= 2 ) );

ALTER TABLE addresses
    ADD CONSTRAINT chk_addresses_city CHECK ( ( length(city) >= 2 ) );

ALTER TABLE addresses
    ADD CONSTRAINT chk_addresses_country CHECK ( ( country IN ( 'PL', 'US', 'DE', 'FR', 'GB' ) ) );

ALTER TABLE addresses
    ADD CONSTRAINT chk_addresses_house_no CHECK ( ( length(house_no) <= 20 ) );

ALTER TABLE addresses
    ADD CONSTRAINT address_per_user_un UNIQUE ( user_id,
                                                country,
                                                city,
                                                post_code,
                                                st_name,
                                                house_no );

--  This table links specific products to orders, showing which products were
--  purchased in each order. It includes order_detail_id, order_id, product_id,
--  quantity, price_per_unit, and total price for the product in that order.
CREATE TABLE order_details (
    order_det_id NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    product_id   NUMBER NOT NULL,
    order_id     NUMBER NOT NULL,
    ord_qnty     NUMBER(4) NOT NULL,
    unit_price   NUMBER(5, 2) NOT NULL,
    total_price  NUMBER(6, 2) NOT NULL
);

CREATE INDEX idx_order_det_prod_id ON
    order_details (
        product_id
    ASC );

CREATE INDEX idx_order_det_ord_id ON
    order_details (
        order_id
    ASC );

ALTER TABLE order_details
    ADD CONSTRAINT chk_order_details_qnty CHECK ( ( ord_qnty > 0 ) );

ALTER TABLE order_details
    ADD CONSTRAINT chk_order_details_unitprice CHECK ( ( unit_price >= 0 ) );

ALTER TABLE order_details
    ADD CONSTRAINT chk_order_details_total_price CHECK ( ( total_price = ( ord_qnty * unit_price ) ) );

ALTER TABLE order_details ADD CONSTRAINT order_details_prod_order_un UNIQUE ( product_id,
                                                                              order_id );

--  This table tracks orders placed by users. It includes order_id, user_id,
--  order_date, total_amount
CREATE TABLE orders (
    orders_id    NUMBER GENERATED AS IDENTITY (START WITH 100 INCREMENT BY 10) PRIMARY KEY,
    user_id      NUMBER
        CONSTRAINT nnc_orders_user_id NOT NULL,
    payment_id   NUMBER,
    order_date   DATE DEFAULT sysdate
        CONSTRAINT nnc_orders_order_date NOT NULL,
    order_status VARCHAR2(50) DEFAULT 'PENDING'
        CONSTRAINT nnc_orders_order_status NOT NULL,
    total_amount NUMBER(6, 2)
        CONSTRAINT nnc_orders_total_amount NOT NULL,
    notes        VARCHAR2(100)
);

CREATE UNIQUE INDEX idx_orders_user_id ON
    orders (
        user_id
    ASC );

CREATE INDEX idx_orders_order_date ON
    orders (
        order_date
    ASC );

CREATE INDEX idx_orders_order_status ON
    orders (
        order_status
    ASC );

ALTER TABLE orders
    ADD CONSTRAINT chk_orders_amount CHECK ( ( total_amount >= 0 ) );

ALTER TABLE orders
    ADD CONSTRAINT chk_orders_status CHECK ( ( order_status IN ( 'PENDING', 'COMPLETED', 'CANCELLED' ) ) );

--  The payments table stores payment information for orders. It includes
--  payment_id, order_id, payment_date, amount, payment_method (e.g., credit
--  card, blik), and payment_status
CREATE TABLE payments (
    payment_id     NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    order_id       NUMBER NOT NULL,
    payment_date   DATE DEFAULT sysdate NOT NULL,
    payment_status VARCHAR2(40) DEFAULT 'PENDING' NOT NULL,
    payment_method VARCHAR2(40)
);

CREATE INDEX idx_payments_orderid ON
    payments (
        order_id
    ASC );

CREATE INDEX idx_payments_status ON
    payments (
        payment_status
    ASC );

ALTER TABLE payments
    ADD CONSTRAINT chk_payments_method CHECK ( ( payment_method IN ( 'CREDIT_CARD', 'BLIK', 'BANK_TRANSFER', 'CASH ON DELIVERY' ) ) )
    ;

ALTER TABLE payments
    ADD CONSTRAINT chk_payments_status CHECK ( ( payment_status IN ( 'PENDING', 'COMPLETED', 'FAILED', 'REFUNDED' ) ) );

--  This table defines different categories for products (e.g., prescription,
--  over-the-counter, supplements). It includes product_category_id,
--  category_name, and description.
CREATE TABLE product_categories (
    prod_cat_id   NUMBER GENERATED AS IDENTITY (START WITH 100 INCREMENT BY 100) PRIMARY KEY,
    prod_cat_name VARCHAR2(100) NOT NULL,
    prod_cat_desc VARCHAR2(200)
);

CREATE INDEX idx_product_cat_name ON
    product_categories (
        prod_cat_name
    ASC );

ALTER TABLE product_categories
    ADD CONSTRAINT chk_prod_cat_desc CHECK ( ( prod_cat_desc IS NULL
                                               OR length(prod_cat_desc) >= 10 ) );

ALTER TABLE product_categories ADD CONSTRAINT pc_prod_cat_name_un UNIQUE ( prod_cat_name );

--  This table contains information about the pharmaceutical products available
--  in the store. It includes product_id, name, description, price,
--  avl_quantity, and a reference to the product_category_id to categorize the
--  products.
CREATE TABLE products (
    product_id       NUMBER GENERATED AS IDENTITY (START WITH 1 INCREMENT BY 5) PRIMARY KEY,
    product_name     VARCHAR2(50) NOT NULL,
    product_desc     VARCHAR2(255),
    exp_date         DATE,
    price            NUMBER(8, 2) NOT NULL,
    avail_status     VARCHAR2(50) DEFAULT 'Available' NOT NULL,
    prescription_req NUMBER(1) DEFAULT 0 NOT NULL,
    prod_cat_id      NUMBER
);

CREATE INDEX idx_products_name ON
    products (
        product_name
    ASC );

CREATE INDEX idx_products_price ON
    products (
        price
    ASC );

CREATE INDEX idx_prod_cat_id ON
    products (
        prod_cat_id
    ASC );

ALTER TABLE products
    ADD CONSTRAINT chk_products_name CHECK ( ( length(product_name) >= 3 ) );

ALTER TABLE products
    ADD CONSTRAINT chk_products_price CHECK ( ( price >= 0 ) );

ALTER TABLE products
    ADD CONSTRAINT chk_products_exp CHECK ( ( exp_date IS NULL
                                              OR exp_date > TO_DATE('2025-01-01', 'YYYY-MM-DD') ) );

ALTER TABLE products
    ADD CONSTRAINT chk_products_presc CHECK ( ( prescription_req IN ( 0, 1 ) ) );

ALTER TABLE products
    ADD CONSTRAINT chk_products_desc CHECK ( ( length(product_desc) >= 10 ) );

ALTER TABLE products
    ADD CONSTRAINT chk_products_status CHECK ( avail_status IN ( 'Available', 'Out of Stock', 'Discontinued', 'Limited Stock' ) );

ALTER TABLE products ADD CONSTRAINT products_name_un UNIQUE ( product_name );

--  The inventory table stores information about stock levels
CREATE TABLE stock (
    stock_id   NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    product_id NUMBER NOT NULL,
    quantity   NUMBER(5) NOT NULL
);

ALTER TABLE stock
    ADD CONSTRAINT chk_stock_qnty CHECK ( ( quantity >= 0 ) );

ALTER TABLE stock ADD CONSTRAINT stock_product_un UNIQUE ( product_id );

--  Table for storing system activity logs, including user actions, errors, and
--  system events for auditing and troubleshooting purposes.
CREATE TABLE system_logs (
    log_id      NUMBER GENERATED AS IDENTITY PRIMARY KEY,
    created_at  DATE DEFAULT sysdate NOT NULL,
    log_type    VARCHAR2(20) NOT NULL,
    log_details VARCHAR2(1000),
    created_by  NUMBER DEFAULT 371 NOT NULL,
    user_id     NUMBER  NULL,
    product_id  NUMBER  NULL,
    order_id    NUMBER  NULL
);

CREATE INDEX idx_system_logs_created_at ON
    system_logs (
        created_at
    ASC );

CREATE INDEX idx_system_logs_log_type ON
    system_logs (
        log_type
    ASC );

CREATE INDEX idx_system_logs_created_by ON
    system_logs (
        created_by
    ASC );

CREATE INDEX idx_system_logs_user_id ON
    system_logs (
        user_id
    ASC );

CREATE INDEX idx_system_logs_product_id ON
    system_logs (
        product_id
    ASC );

CREATE INDEX idx_system_logs_order_id ON
    system_logs (
        order_id
    ASC );

ALTER TABLE system_logs
    ADD CONSTRAINT chk_system_logs_type CHECK ( ( log_type IN ( 'UPDATE', 'INSERT', 'DELETE', 'ERROR' ) ) );

--  This table stores information about the users of the application, such as
--  customers and possibly pharmacy staff. It includes columns like user_id,
--  username, email, password, role (e.g., clients, admin).
CREATE TABLE users (
    user_id        NUMBER GENERATED AS IDENTITY (START WITH 101 INCREMENT BY 10) PRIMARY KEY,
    first_name     VARCHAR2(50) NOT NULL,
    last_name      VARCHAR2(50) NOT NULL,
    email          VARCHAR2(150) NOT NULL,
    phone          VARCHAR2(20) NOT NULL,
    password       VARCHAR2(128) NOT NULL,
    reg_date       DATE DEFAULT sysdate NOT NULL,
    account_status VARCHAR2(20) DEFAULT 'Active' NOT NULL,
    role           VARCHAR2(10) NOT NULL,
    created_at     DATE NOT NULL
);

CREATE INDEX idx_users_email_passw ON
    users (
        email
    ASC,
        password
    ASC );

CREATE INDEX idx_users_phone ON
    users (
        phone
    ASC );

ALTER TABLE users
    ADD CONSTRAINT chk_email_format CHECK ( ( email LIKE '%@%' ) );

ALTER TABLE users
    ADD CONSTRAINT chk_phone_format CHECK ( REGEXP_LIKE(phone, '^[0-9]{9,15}$' ) );

ALTER TABLE users
    ADD CONSTRAINT chk_role CHECK ( ( role IN ( 'Admin', 'Client' ) ) );

ALTER TABLE users
    ADD CONSTRAINT chk_passw_length CHECK ( ( length(password) >= 8 ) );

ALTER TABLE users
    ADD CONSTRAINT chk_status CHECK ( ( account_status IN ( 'Inactive', 'Active', 'Locked' ) ) );

ALTER TABLE users
    ADD CONSTRAINT users_email_phone_pass_un UNIQUE ( email,
                                                      phone,
                                                      password );

ALTER TABLE addresses
    ADD CONSTRAINT addresses_users_fk FOREIGN KEY ( user_id )
        REFERENCES users ( user_id )
            ON DELETE CASCADE;

ALTER TABLE order_details
    ADD CONSTRAINT order_details_orders_fk FOREIGN KEY ( order_id )
        REFERENCES orders ( orders_id )
            ON DELETE CASCADE;

ALTER TABLE order_details
    ADD CONSTRAINT order_details_products_fk FOREIGN KEY ( product_id )
        REFERENCES products ( product_id );

ALTER TABLE orders
    ADD CONSTRAINT orders_payments_fk FOREIGN KEY ( payment_id )
        REFERENCES payments ( payment_id );

ALTER TABLE orders
    ADD CONSTRAINT orders_users_fk FOREIGN KEY ( user_id )
        REFERENCES users ( user_id );

ALTER TABLE payments
    ADD CONSTRAINT payments_orders_fk FOREIGN KEY ( order_id )
        REFERENCES orders ( orders_id );

ALTER TABLE products
    ADD CONSTRAINT products_product_categories_fk FOREIGN KEY ( prod_cat_id )
        REFERENCES product_categories ( prod_cat_id )
            ON DELETE SET NULL;

ALTER TABLE stock
    ADD CONSTRAINT stock_products_fk FOREIGN KEY ( product_id )
        REFERENCES products ( product_id )
            ON DELETE CASCADE;




-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             9
-- CREATE INDEX                            21
-- ALTER TABLE                             52
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
